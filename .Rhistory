m182_sem1_FRN
m182_sem1_SEAT
studentnets.ergm182
library(NetData)
studentnets.ergm182
m182_sem1_SEAT
unique(m182_sem1_SEAT)
table(m182_sem1_SEAT)
m182_sem1_TSL
m182_sem1_SSL
unique(m182_sem1_SSL)
nl
nl<-netlm(m182_sem2_SSL,response_matrices)
response_matrices <- array(NA, c(6, length(m182_sem1_SSL[1,]),length(m182_sem1_SSL[1,])))
response_matrices[1,,] <- m182_sem1_SSL
response_matrices[2,,] <- m182_sem1_TSL
response_matrices[3,,] <- m182_sem1_FRN
response_matrices[4,,] <- m182_sem1_SEAT
response_matrices[5,,] <- m182_sem1_RCE
response_matrices[6,,] <- m182_sem1_GND
##############################
#(3a) SSL2 <- SSL1 + TSL1 + FRN1 + SEAT1 + RCE + GND
##############################
#Fit a netlm model
nl<-netlm(m182_sem2_SSL,response_matrices)
nl
nlLabeled <- list()
nlLabeled <- summary(nl)
nlLabeled$names <- c("Intercept", "Social normalized and labeled (SSL1)", "Task normalized and labeled (TSL1)", "Friends 1=friend, 2=best friend(FRN1)", "Seat in first semester (Seat1)","Race (RCE)","Gender (GND)")
nlLabeled$coefficients = round(nlLabeled$coefficients, 2)
nlLabeled
m182_sem1_SEAT
?netlm
m182_sem1_RCE
m182_sem1_GND
m182_sem1_SEAT
m182_sem1_FRN
m182_sem2_SSL
m182_sem2_SSL
m182_sem1_FRN
m182_sem1_FRN[,1]
m182_sem1_FRN[,2]
m182_sem1_FRN[,3]
nl
nlLabeled
m182_sem1_FRN
factor(m182_sem1_FRN)
apply(m182_sem1_FRN, 2, as.character)
m182_sem1_FRN = apply(m182_sem1_FRN, 2, as.character)
response_matrices[3,,] <- m182_sem1_FRN
nl<-netlm(m182_sem2_SSL,response_matrices)
nl
nl<-netlm(m182_sem2_SSL,response_matrices, intercept=F)
nl
m182_sem1_FRN
response_matrices <- array(NA, c(6, length(m182_sem1_SSL[1,]),length(m182_sem1_SSL[1,])))
response_matrices[1,,] <- m182_sem1_SSL
response_matrices[2,,] <- m182_sem1_TSL
response_matrices[3,,] <- m182_sem1_FRN
response_matrices[4,,] <- m182_sem1_SEAT
response_matrices[5,,] <- m182_sem1_RCE
response_matrices[6,,] <- m182_sem1_GND
m182_sem1_FRN
m182_sem1_SEAT
m182_sem1_FRN
m182_sem1_TSL
m182_sem1_SSL
m182_sem1_TSL
m182_sem2_SSL
nl
# Important: All matrices must be the same size!
response_matrices <- array(NA, c(6, length(m173_sem1_SSL[1,]),length(m173_sem1_SSL[1,])))
response_matrices[1,,] <- m173_sem1_SSL
response_matrices[2,,] <- m173_sem1_TSL
response_matrices[3,,] <- m173_sem1_FRN
response_matrices[4,,] <- m173_sem1_SEAT
response_matrices[5,,] <- m173_sem1_RCE
response_matrices[6,,] <- m173_sem1_GND
data(studentnets.mrqap173, package="NetData")
# Look at what we loaded via
ls()
# We need the data in matrix format
# predictor matrices
m173_sem1_SSL <- as.matrix(m173_sem1_SSL)
m173_sem1_TSL <- as.matrix(m173_sem1_TSL)
m173_sem1_FRN <- as.matrix(m173_sem1_FRN)
m173_sem1_SEAT <- as.matrix(m173_sem1_SEAT)
m173_sem1_RCE <- as.matrix(m173_sem1_RCE)
m173_sem1_GND <- as.matrix(m173_sem1_GND)
# Load response matrices
m173_sem2_SSL <- as.matrix(m173_sem2_SSL)
m173_sem2_TSL <- as.matrix(m173_sem2_TSL)
# In order to run the QAP regression we must create an array of matrices
# containing all the predcitor matrices.  We are, in effect, creating a
# 3-d matrix (predcitor x n x n).
# Important: All matrices must be the same size!
response_matrices <- array(NA, c(6, length(m173_sem1_SSL[1,]),length(m173_sem1_SSL[1,])))
response_matrices[1,,] <- m173_sem1_SSL
response_matrices[2,,] <- m173_sem1_TSL
response_matrices[3,,] <- m173_sem1_FRN
response_matrices[4,,] <- m173_sem1_SEAT
response_matrices[5,,] <- m173_sem1_RCE
response_matrices[6,,] <- m173_sem1_GND
response_matrices
m173_sem1_SSL
m173_sem1_TSL
m173_sem2_SSL
m173_sem1_SSL
m173_sem1_FRN
nl<-netlm(m173_sem2_SSL,m173_sem1_FRN)
nl
?studentnets.mrqap173
??mrqap173
library(markovchain)
install.packages("markovchain")
library(markovchain)
mcSIR <- new("markovchain", states=c("E","L","A"),
transitionMatrix=matrix(data=c(0,0,T,0.1,0.5,0,0,0.5,1/3),
byrow=TRUE, nrow=3), name="SIR")
initialState <- c(1,0,0)
mcSIR <- new("markovchain", states=c("E","L","A"),
transitionMatrix=matrix(data=c(0,0,100,0.1,0.5,0,0,0.5,1/3),
byrow=TRUE, nrow=3), name="SIR")
install.packages("demogR")
install.packages("popbio")
?popbio
??popbio
library(popbio)
A <- matrix(c(0, 0, 5.905, 0.368, 0.639, 0.025, 0.001, 0.152,
+ 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages,+ stages))
n <- c(5, 5, 5)
A <- matrix(c(0, 0, 5.905, 0.368, 0.639, 0.025, 0.001, 0.152,
+ 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
stages <- c("egg", "larva", "adult")
A <- matrix(c(0, 0, 5.905, 0.368, 0.639, 0.025, 0.001, 0.152,
+ 0.051), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
A
stages <- c("egg", "larva", "adult")
A <- matrix(c(0, 0, 100, 0.1, 0.5, 0, 0, 0.5, 1/3), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
A
n <- c(1, 0, 0)
p <- pop.projection(A, n, 15)
plot(p)
p
stage.vectors
p$stage.vectors
plot(p$stage.vectors[1,], colour = "red")
points(p$stage.vectors[2,], colour = "green")
points(p$stage.vectors[3,], colour = "blue")
plot(p$stage.vectors[1,], color = "red")
points(p$stage.vectors[2,], color = "green")
points(p$stage.vectors[3,], color = "blue")
plot(p$stage.vectors[1,], color = "red")
warnings()
?plot
plot(p$stage.vectors[1,], col = "red")
plot(p$stage.vectors[1,], col = "red", type = "l")
plot(p$stage.vectors[1,], col = "red", type = "l")
points(p$stage.vectors[2,], col = "green", type = "l")
points(p$stage.vectors[3,], col = "blue", type = "l")
p <- pop.projection(A, n, 500)
plot(p$stage.vectors[1,], col = "red", type = "l")
points(p$stage.vectors[2,], col = "green", type = "l")
points(p$stage.vectors[3,], col = "blue", type = "l")
n <- c(10, 10, 10)
p <- pop.projection(A, n, 500)
plot(p$stage.vectors[1,], col = "red", type = "l")
points(p$stage.vectors[2,], col = "green", type = "l")
points(p$stage.vectors[3,], col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
n <- c(10, 0, 0)
p <- pop.projection(A, n, 15)
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l", ylim = c(0,10))
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
n <- c(10, 2, 1)
p <- pop.projection(A, n, 15)
plot(log(p$stage.vectors[1,]), col = "red", type = "l", ylim = c(0,10))
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
n <- c(10, 10, 10)
p <- pop.projection(A, n, 15)
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
log(p$stage.vectors[1,])
A <- matrix(c(0, 0, 20/3, 0.1, 0.5, 0, 0, 0.5, 1/3), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
n <- c(10, 10, 10)
p <- pop.projection(A, n, 15)
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
stages <- c("egg", "larva", "adult")
A <- matrix(c(0, 0, 100, 0.1, 0.5, 0, 0, 0.5, 1/3), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
n <- c(10, 10, 10)
p <- pop.projection(A, n, 15)
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
p
plot(log(p$stage.vectors[1,]), log(1:15) col = "red", type = "l")
plot(log(p$stage.vectors[1,]), log(1:15), col = "red", type = "l")
plot(log(p$stage.vectors[1,]), 1:15, col = "red", type = "l")
plot(y=log(p$stage.vectors[1,]), 1:15, col = "red", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
p <- pop.projection(A, n, 100)
plot(y=log(p$stage.vectors[1,]), 1:15, col = "red", type = "l")
plot(y=log(p$stage.vectors[1,]), col = "red", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
A
eigen(A)
p
p$pop.changes
plot(p$pop.changes)
plot(p$pop.sizes)
diff(p$pop.sizes)
?diff
diff(p$pop.sizes, lag=1)
diff(p$pop.sizes, lag=0)
diff(p$pop.sizes, lag=2)
diff(p$pop.sizes, lag=1)
plot(diff(p$pop.sizes, lag=1))
p$pop.sizes
?diff
diff(1:10, 2)
diff(1:10, 1)
p$pop.sizes
diff(p$pop.sizes)
(p$pop.sizes)
p$pop.sizes
p
?pop.projection
1.578943e+32/7.894713e+31
plot((p$stage.vectors[1,]), col = "red", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
p <- pop.projection(A, n, 20)
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
points(1:10, (1:10)*2)
points(1:10, (1:10))
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
log(p$stage.vectors[1,])
18.587021/17.914675
14.412472/13.688635
plot((p$stage.vectors[1,]), col = "red", type = "l")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot((p$stage.vectors[1,]), col = "red", type = "l", xlab = "Time", ylab = "Population size")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
plot(log(p$stage.vectors[1,]), col = "red", type = "l", xlab = "Time", ylab = "Log(Population size)")
points(log(p$stage.vectors[2,]), col = "green", type = "l")
points(log(p$stage.vectors[3,]), col = "blue", type = "l")
plot((p$stage.vectors[1,]), col = "red", type = "l", xlab = "Time", ylab = "Population size")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
p <- pop.projection(A, n, 10)
plot((p$stage.vectors[1,]), col = "red", type = "l", xlab = "Time", ylab = "Population size")
points((p$stage.vectors[2,]), col = "green", type = "l")
points((p$stage.vectors[3,]), col = "blue", type = "l")
legend()
?legend
p
data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat = data.frame(T = 1:10, "Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat
pmat.m = melt(pmat)
pmat.m
library(reshape2)
pmat.m = melt(pmat)
ggplot(pmat)+
geom_line(aes(x=T, y))
library(ggplot2)
ggplot(pmat)+
geom_line(aes(x=T, y))
pmat.m
head(pmat.m)
pmat.m = melt(as.matrix(pmat))
pmat.m
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
head(pmat.m)
ggplot(pmat)+
geom_line(aes(x=Var1, y=value, colour = Var2))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
p <- pop.projection(A, n, 100)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
p <- pop.projection(A, n, 1000)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
p <- pop.projection(A, n, 500)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
p <- pop.projection(A, n, 10)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
qplot(p$pop.sizes)
qplot(p$pop.sizes, geom="line")
?qplot
qplot(x=1:10, y=p$pop.sizes, geom="line")
qplot(x=1:10, y=p$pop.changes, geom="line")
p$pop.changes
qplot(x=1:9, y=p$pop.changes, geom="line")
n <- c(10, 10, 10)
p <- pop.projection(A, n, 20)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
p$pop.changes
qplot(p$pop.changes)
plot(p$pop.changes)
?qplot
plot(p$pop.changes, type = "l")
p$pop.sizes
1.285796e+08/6.553029e+07
pmat
log(pmat)
pmat.log = log(pmat)
ggplot(pmat.logm)+
geom_line(aes(x=Var1, y=value, colour = Var2))
pmat.log = log(pmat)
pmat.logm = melt(as.matrix(pmat.logm))
ggplot(pmat.logm)+
geom_line(aes(x=Var1, y=value, colour = Var2))
pmat.log = log(pmat)
pmat.logm = melt(as.matrix(pmat.logm))
pmat.logm = melt(as.matrix(pmat.log))
ggplot(pmat.logm)+
geom_line(aes(x=Var1, y=value, colour = Var2))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
plot(p$pop.changes, type = "l")
p$pop.changes
p$pop.sizes
log(p$pop.sizes)
plot(log(p$pop.sizes))
p$pop.changes
pmat
rowSums(pmat)
1.285796e+08/6.553029e+07
p$pop.sizes
p$pop.sizes
plot(p$pop.sizes)
log(plot(p$pop.sizes))
log((p$pop.sizes))
plot(log((p$pop.sizes)))
points(1:10, (1:10)*2)
points(1:10, (1:10))
A <- matrix(c(0, 0, 20/3, 0.1, 0.5, 0, 0, 0.5, 1/3), nrow = 3, byrow = TRUE, dimnames = list(stages,stages))
n <- c(10, 10, 10)
p <- pop.projection(A, n, 20)
pmat = data.frame("Egg"=p$stage.vectors[1,], "Larva"=p$stage.vectors[2,], "Adult"=p$stage.vectors[3,])
pmat.m = melt(as.matrix(pmat))
ggplot(pmat.m)+
geom_line(aes(x=Var1, y=value, colour = Var2))
plot(p$pop.changes, type = "l")
g<-array(dim=c(3,10,10))
g[1,,]<-rgraph(10)
g[2,,]<-rgraph(10,tprob=g[1,,]*0.8)
g[3,,]<-1; g[3,1,2]<-0              #This is nearly a clique
#Perform qap tests of graph correlation
q.12<-qaptest(g,gcor,g1=1,g2=2)
q.13<-qaptest(g,gcor,g1=1,g2=3)
library(sna)
g<-array(dim=c(3,10,10))
g[1,,]<-rgraph(10)
g[2,,]<-rgraph(10,tprob=g[1,,]*0.8)
g[3,,]<-1; g[3,1,2]<-0              #This is nearly a clique
#Perform qap tests of graph correlation
q.12<-qaptest(g,gcor,g1=1,g2=2)
q.13<-qaptest(g,gcor,g1=1,g2=3)
q.12
summary(q.12)
(6/11)*(5/11)*(5/11)*(5/11)
((6/11)*(5/11)*(5/11)*(5/11))*4
2/11
((6/11)*(5/11)*(5/11)*(5/11))*3
((6/11)*(5/11)*(5/11)*(5/11))*4
((6/11)*(5/10)*(4/9)*(3/8))*4
!
1/10
(0.75)^10
(0.0.25)^10
(0.25)^10
(0.25)^10+((0.25)^9)*0.75
(0.25)^10
((0.25)^1)*((0.75)^9)
((0.25)^10)*((0.75)^0)
((0.25)^10)*((0.75)^0)+((0.25)^09)*((0.75)^1)
round(((0.25)^10)*((0.75)^0)+((0.25)^09)*((0.75)^1),2)
round(((0.25)^10)*((0.75)^0)+((0.25)^9)*((0.75)^1),2)
((0.25)^9)*((0.75)^1)
(0.25)^1)*((0.75)^9)
((0.25)^1)*((0.75)^9)
((0.25)^1)*((0.75)^9)+((0.25)^0)*((0.75)^90)
((0.25)^1)*((0.75)^9)+((0.25)^0)*((0.75)^10)
((0.25)^1)*((0.75)^9)+((0.25)^0)*((0.75)^10)
1- (((0.25)^1)*((0.75)^9)+((0.25)^0)*((0.75)^10))
((0.25)^0)*((0.75)^10))
((0.25)^0)*((0.75)^10)
((0.25)^1)*((0.75)^9)
((0.25)^0)*((0.75)^10)
((0.25)^1)*((0.75)^9)
((0.5)^1)*((0.5)^9)
(((0.5)^1)*((0.5)^9))*10
2.55020/0.79797
2.507/0.1582
setwd("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/AcademicScribbles/Wellcome2016/James Lester/")
library(slidify)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
library("slidify")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
library(slidify)
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
library(slidify)
publish(user="Mancwealm", repo = "Pres_WT")
slidify("Index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user="Mancwealm", repo = "Pres_WT")
slidify("index.Rmd")
publish(user="Mancwealm", repo = "Pres_WT")
publish(user="Mancwealm", repo = "Pres_WT")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user="Mancwealm", repo = "Pres_WT")
slidify("index.Rmd")
publish(user="Mancwealm", repo = "Pres_WT")
