#Now for recovery round...
#Hmm, would be good to make this simultaneous like the above, rather than weird sequential behaviour
#So maybe don't update stateVect quite yet...
#Ah, issue is that this creates a bit of weirdness with some nodes recovering the turn they pass infection along in the network
#But such behaviour isn't really unreasonable at the end of the day? Seems appropriate, given the nature of other bits of the model
#Furthermore, does ensure at least one turn of infection before removal
toRecov = NULL
for(j in 1:sum(stateVect == "I"))
{
currInf = which(stateVect == "I")[j]
if(runif(1) < nGamma){toRecov = c(toRecov, currInf)}
}
stateVect[toInf] = "I"
stateVect[toRecov] = "R"
stateCount = rbind(stateCount,
data.frame(S = sum(stateVect == "S"),
I = sum(stateVect == "I"),
R = sum(stateVect == "R")))
}
stateCount.m = melt(as.matrix(stateCount))
ggplot(stateCount.m) +
geom_line(aes(x = Var1, y = value, group = Var2, colour = Var2))
i
j
stateVect
currInf = which(stateVect == "I")[j]
currConnect = adjMat[,currInf]
#Work out which of these connections are to individuals who are susceptible to infection in this timestep
currConnect = adjMat[,currInf]
currInf
#Can do comparisons for mean field between both network stuff, and agent stuff now, in a rather neat way
#Need to write up network mechanics again - Should be easy to do a less package-reliant version
#Need to make a connectivity matrix, then just track infection states
nBeta = 0.01
nGamma = 0.01
stateVect = rep("S", 500)
stateVect[sample(1:length(stateVect), 10)] = "I"
stateCount = data.frame(S = sum(stateVect == "S"),I = sum(stateVect == "I"),R = sum(stateVect == "R"))
adjMat = matrix(rbinom(500^2, 1, 0.1), nrow = 500, ncol = 500)
#adjMat[upper.tri(adjMat)] = t(adjMat)[lower.tri(adjMat)]
adjMat = forceSymmetric(adjMat)
diag(adjMat) = 0
#Ok, so now need to work out how we're going to neatly fill out this matrix
#Ideally want to specify an average number of edges per vertex, and we're going for an undirected graph, so everything's going to have to work out symmetrical
#So, we've now got our desired lists of connections and of individual states within the network itself - Now need to actually start our process
#Main things to think about are that we only ever need to be tracing what's going on for our infected nodes - No time needs to be spend assessing...
#The situation for suscs- Just going to focus upon connections between infected and susceptible nodes
for(i in 1:500)
{
toInf = NULL
for(j in 1:sum(stateVect == "I"))
{
#Ok, so going to need to be careful about where infection can go in a given timestep
#Can multiple infections happen, for instance? If we have a single infected node, can that then go to anything that's connected?
#Alternative is that we sample edges to decide which way things are going to go
#Former situation might be more suited to a density dep situation, whilst the latter is frequency dep... Kinda depends on construction....
#Of agent-based model - Can't recall if that only allows individual infections per infected
#Ok, so with its current formulation it only allows each infected to infect one other turtle per timestep
#But to better bring everything in line, might actually be preferable to provide force of infection which can hit any sharing space with inf
#Not going to have a huge impact, as particularly on large plot area frequency of multiples (greater than 2) on a patch is v. low - But worth looking @
currInf = which(stateVect == "I")[j]
currConnect = adjMat[,currInf]
#Work out which of these connections are to individuals who are susceptible to infection in this timestep
#In theory, as we're taking this very crude + explosive approach to transmission, don't need to worry about superinfection stuff...
currConnectSusc = which(currConnect>0 & stateVect == "S")
#Now need to interrogate each of these which are susceptibles to see if we get spread or not
for(k in 1:length(currConnectSusc))
{
if(runif(1) < nBeta){toInf = c(toInf, currConnectSusc[k])}
}
}
#Going to need to be storing this better so we can actually do decent counts...
#Now for recovery round...
#Hmm, would be good to make this simultaneous like the above, rather than weird sequential behaviour
#So maybe don't update stateVect quite yet...
#Ah, issue is that this creates a bit of weirdness with some nodes recovering the turn they pass infection along in the network
#But such behaviour isn't really unreasonable at the end of the day? Seems appropriate, given the nature of other bits of the model
#Furthermore, does ensure at least one turn of infection before removal
toRecov = NULL
for(j in 1:sum(stateVect == "I"))
{
currInf = which(stateVect == "I")[j]
if(runif(1) < nGamma){toRecov = c(toRecov, currInf)}
}
stateVect[toInf] = "I"
stateVect[toRecov] = "R"
stateCount = rbind(stateCount,
data.frame(S = sum(stateVect == "S"),
I = sum(stateVect == "I"),
R = sum(stateVect == "R")))
}
stateCount.m = melt(as.matrix(stateCount))
ggplot(stateCount.m) +
geom_line(aes(x = Var1, y = value, group = Var2, colour = Var2))
?sample
which(stateVect == "I")
sample(which(stateVect == "I"), 2)
rbeta(1, nGamma)
rbeta(1, 1, nGamma)
rbeta(1, 1, nGamma)
?rbeta
rbeta(100, 0.5, 0.5)
hist(rbeta(100, 0.5, 0.5))
hist(rbeta(100, 0.1, 0.1))
hist(rbeta(100, 1, 1))
hist(rbeta(100, 2, 2))
?rnorm
?rgamma
rgamma(1, 1)
?rbeta
?rbinom
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
rbinom(1,sum(stateVect == "I"), nGamma)
rbinom(1,sum(stateVect == "I"), nGamma)
rbinom(1,sum(stateVect == "I"), nGamma)
rbinom(1,sum(stateVect == "I"), nGamma)
nGamma
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
rbinom(1,10, 0.1)
nGamma = 0.5
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma))
nBeta = 0.1
nGamma = 0.1
stateVect = rep("S", 500)
stateVect[sample(1:length(stateVect), 10)] = "I"
stateCount = data.frame(S = sum(stateVect == "S"),I = sum(stateVect == "I"),R = sum(stateVect == "R"))
adjMat = matrix(rbinom(500^2, 1, 0.1), nrow = 500, ncol = 500)
#adjMat[upper.tri(adjMat)] = t(adjMat)[lower.tri(adjMat)]
adjMat = forceSymmetric(adjMat)
diag(adjMat) = 0
#Ok, so now need to work out how we're going to neatly fill out this matrix
#Ideally want to specify an average number of edges per vertex, and we're going for an undirected graph, so everything's going to have to work out symmetrical
#So, we've now got our desired lists of connections and of individual states within the network itself - Now need to actually start our process
#Main things to think about are that we only ever need to be tracing what's going on for our infected nodes - No time needs to be spend assessing...
#The situation for suscs- Just going to focus upon connections between infected and susceptible nodes
for(i in 1:500)
{
toInf = NULL
for(j in 1:sum(stateVect == "I"))
{
#Ok, so going to need to be careful about where infection can go in a given timestep
#Can multiple infections happen, for instance? If we have a single infected node, can that then go to anything that's connected?
#Alternative is that we sample edges to decide which way things are going to go
#Former situation might be more suited to a density dep situation, whilst the latter is frequency dep... Kinda depends on construction....
#Of agent-based model - Can't recall if that only allows individual infections per infected
#Ok, so with its current formulation it only allows each infected to infect one other turtle per timestep
#But to better bring everything in line, might actually be preferable to provide force of infection which can hit any sharing space with inf
#Not going to have a huge impact, as particularly on large plot area frequency of multiples (greater than 2) on a patch is v. low - But worth looking @
currInf = which(stateVect == "I")[j]
currConnect = adjMat[,currInf]
#Work out which of these connections are to individuals who are susceptible to infection in this timestep
#In theory, as we're taking this very crude + explosive approach to transmission, don't need to worry about superinfection stuff...
currConnectSusc = which(currConnect>0 & stateVect == "S")
#Now need to interrogate each of these which are susceptibles to see if we get spread or not
#Might be better to do this as a sample? Would dodge this additional for loop, which doesn't seem necessary
#     for(k in 1:length(currConnectSusc))
#     {
#      if(runif(1) < nBeta){toInf = c(toInf, currConnectSusc[k])}
#     }
toInf = c(toInf, sample(currConnectSusc, rbinom(1,length(currConnectSusc), nBeta)))
}
#Going to need to be storing this better so we can actually do decent counts...
#Now for recovery round...
#Hmm, would be good to make this simultaneous like the above, rather than weird sequential behaviour
#So maybe don't update stateVect quite yet...
#Ah, issue is that this creates a bit of weirdness with some nodes recovering the turn they pass infection along in the network
#But such behaviour isn't really unreasonable at the end of the day? Seems appropriate, given the nature of other bits of the model
#Furthermore, does ensure at least one turn of infection before removal
toRecov = NULL
#Seems like we could reasonably use a distribution here - Could we actually just rbinom it?
toRecov = c(toRecov, sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma)))
#   for(j in 1:sum(stateVect == "I"))
#   {
#     currInf = which(stateVect == "I")[j]
#     if(runif(1) < nGamma){toRecov = c(toRecov, currInf)}
#   }
stateVect[toInf] = "I"
stateVect[toRecov] = "R"
stateCount = rbind(stateCount,
data.frame(S = sum(stateVect == "S"),
I = sum(stateVect == "I"),
R = sum(stateVect == "R")))
}
stateCount.m = melt(as.matrix(stateCount))
ggplot(stateCount.m) +
geom_line(aes(x = Var1, y = value, group = Var2, colour = Var2))
rowSums(stateCount.m)
(stateCount.m)
(stateCount)
rowSums(stateCount)
stateCount
nBeta = 0.01
nGamma = 0.1
stateVect = rep("S", 500)
stateVect[sample(1:length(stateVect), 10)] = "I"
stateCount = data.frame(S = sum(stateVect == "S"),I = sum(stateVect == "I"),R = sum(stateVect == "R"))
adjMat = matrix(rbinom(500^2, 1, 0.1), nrow = 500, ncol = 500)
#adjMat[upper.tri(adjMat)] = t(adjMat)[lower.tri(adjMat)]
adjMat = forceSymmetric(adjMat)
diag(adjMat) = 0
#Ok, so now need to work out how we're going to neatly fill out this matrix
#Ideally want to specify an average number of edges per vertex, and we're going for an undirected graph, so everything's going to have to work out symmetrical
#So, we've now got our desired lists of connections and of individual states within the network itself - Now need to actually start our process
#Main things to think about are that we only ever need to be tracing what's going on for our infected nodes - No time needs to be spend assessing...
#The situation for suscs- Just going to focus upon connections between infected and susceptible nodes
for(i in 1:500)
{
toInf = NULL
for(j in 1:sum(stateVect == "I"))
{
#Ok, so going to need to be careful about where infection can go in a given timestep
#Can multiple infections happen, for instance? If we have a single infected node, can that then go to anything that's connected?
#Alternative is that we sample edges to decide which way things are going to go
#Former situation might be more suited to a density dep situation, whilst the latter is frequency dep... Kinda depends on construction....
#Of agent-based model - Can't recall if that only allows individual infections per infected
#Ok, so with its current formulation it only allows each infected to infect one other turtle per timestep
#But to better bring everything in line, might actually be preferable to provide force of infection which can hit any sharing space with inf
#Not going to have a huge impact, as particularly on large plot area frequency of multiples (greater than 2) on a patch is v. low - But worth looking @
currInf = which(stateVect == "I")[j]
currConnect = adjMat[,currInf]
#Work out which of these connections are to individuals who are susceptible to infection in this timestep
#In theory, as we're taking this very crude + explosive approach to transmission, don't need to worry about superinfection stuff...
currConnectSusc = which(currConnect>0 & stateVect == "S")
#Now need to interrogate each of these which are susceptibles to see if we get spread or not
#Might be better to do this as a sample? Would dodge this additional for loop, which doesn't seem necessary
#     for(k in 1:length(currConnectSusc))
#     {
#      if(runif(1) < nBeta){toInf = c(toInf, currConnectSusc[k])}
#     }
toInf = c(toInf, sample(currConnectSusc, rbinom(1,length(currConnectSusc), nBeta)))
}
#Going to need to be storing this better so we can actually do decent counts...
#Now for recovery round...
#Hmm, would be good to make this simultaneous like the above, rather than weird sequential behaviour
#So maybe don't update stateVect quite yet...
#Ah, issue is that this creates a bit of weirdness with some nodes recovering the turn they pass infection along in the network
#But such behaviour isn't really unreasonable at the end of the day? Seems appropriate, given the nature of other bits of the model
#Furthermore, does ensure at least one turn of infection before removal
toRecov = NULL
#Seems like we could reasonably use a distribution here - Could we actually just rbinom it?
toRecov = c(toRecov, sample(which(stateVect == "I"), rbinom(1,sum(stateVect == "I"), nGamma)))
#   for(j in 1:sum(stateVect == "I"))
#   {
#     currInf = which(stateVect == "I")[j]
#     if(runif(1) < nGamma){toRecov = c(toRecov, currInf)}
#   }
stateVect[toInf] = "I"
stateVect[toRecov] = "R"
stateCount = rbind(stateCount,
data.frame(S = sum(stateVect == "S"),
I = sum(stateVect == "I"),
R = sum(stateVect == "R")))
}
stateCount.m = melt(as.matrix(stateCount))
ggplot(stateCount.m) +
geom_line(aes(x = Var1, y = value, group = Var2, colour = Var2))
install.packages('Rcpp')
library(shiny)
runApp("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/OtherFunandGames/SIRtest")
install.packages("simecol")
runApp("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/OtherFunandGames/SIRtest")
setwd("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/MassActionRez")
source("DisScriptRewr_Fun.r")
#Ah, all of these are now overriding, which makes me sad
densRun = discStocFun(nrep = 10, modType = 1, disModType = 1)
freqRun = discStocFun(nrep = 10, modType = 1, disModType = 2)
powRun = discStocFun(nrep = 10, modType = 1, disModType = 3, p = 0.2, q = 0.2)
powRun2 = discStocFun(nrep = 10, modType = 1, disModType = 3, p = 0.5, q = 0.5)
powRun3 = discStocFun(nrep = 10, modType = 1, disModType = 3, p = 0.2, q = 0.8)
powRun4 = discStocFun(nrep = 10, modType = 1, disModType = 3, p = 0.8, q = 0.2)
meanRun = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 2)
meanRun2 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 5)
################################################################
#So these are our comparisons between things which *should* show similar behaviour
#So main thing is going to be just saving out our relevant plots for comparison - Could also get some funkiness from scaling here...
################################################################
dis1 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 1)
dis2 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 2)
dis5 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 5)
dis10 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 10)
################################################################
dismin1 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 1, S0 = 499, I0 = 1, R0 = 0)
dismin2 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 2, S0 = 499, I0 = 1, R0 = 0)
dismin5 = discStocFun(nrep = 10, modType = 1, disModType = 4, n0 = 5, S0 = 499, I0 = 1, R0 = 0)
################################################################
net1 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 1)
net2 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 2)
net5 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 5)
net10 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 10)
################################################################
netmin1 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 1, S0 = 499, I0 = 1, R0 = 0)
netmin2 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 2, S0 = 499, I0 = 1, R0 = 0)
netmin5 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 5, S0 = 499, I0 = 1, R0 = 0)
netmin10 = discStocFun(nrep = 10, modType = 2, dynaNet = F, links = 10, S0 = 499, I0 = 1, R0 = 0)
################################################################
dnet1 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 1, dynaShift = 40)
dnet2 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 2, dynaShift = 40)
dnet5 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 5, dynaShift = 40)
dnet10 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 10, dynaShift = 40)
################################################################
dnetmin1 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 1, dynaShift = 40, S0 = 499, I0 = 1, R0 = 0)
dnetmin2 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 2, dynaShift = 40, S0 = 499, I0 = 1, R0 = 0)
dnetmin5 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 5, dynaShift = 40, S0 = 499, I0 = 1, R0 = 0)
dnetmin10 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 10, dynaShift = 40, S0 = 499, I0 = 1, R0 = 0)
################################################################
dnet12 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 1, dynaShift = 85)
dnet22 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 2, dynaShift = 85)
dnet52 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 5, dynaShift = 85)
dnet102 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 10, dynaShift = 85)
################################################################
dnetmin12 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 1, dynaShift = 85, S0 = 499, I0 = 1, R0 = 0)
dnetmin22 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 2, dynaShift = 85, S0 = 499, I0 = 1, R0 = 0)
dnetmin52 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 5, dynaShift = 85, S0 = 499, I0 = 1, R0 = 0)
dnetmin102 = discStocFun(nrep = 10, modType = 2, dynaNet = T, links = 10, dynaShift = 85, S0 = 499, I0 = 1, R0 = 0)
################################################################
nl1 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 0.54)
nlmin1 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 0.54, S0 = 499, I0 = 1, R0 = 0)
nl2 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 0.75)#Contact = 2ish
nlmin2 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 0.75, S0 = 499, I0 = 1, R0 = 0)
nl5 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 1.19)#Contact = 5ish
nlmin5 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 1.19, S0 = 499, I0 = 1, R0 = 0)
nl10 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 1.68)#Contact = 10ish
nlmin10 = discStocFun(nrep = 10, modType = 3, speed = 0, dist = 1.68, S0 = 499, I0 = 1, R0 = 0)
################################################################
dnl1 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 0.54)
dnlmin1 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 0.54, S0 = 499, I0 = 1, R0 = 0)
dnl2 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 0.75)#Contact = 2ish
dnlmin2 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 0.75, S0 = 499, I0 = 1, R0 = 0)
dnl5 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 1.19)#Contact = 5ish
dnlmin5 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 1.19, S0 = 499, I0 = 1, R0 = 0)
dnl10 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 1.68)#Contact = 10ish
dnlmin10 = discStocFun(nrep = 10, modType = 3, speed = 0.1, dist = 1.68, S0 = 499, I0 = 1, R0 = 0)
################################################################
library(gridExtra)
#I think this might need a bit more nuance for our mass-merging
#Then we can nicely facet things, which'd look far nicer
#Also sets us up to be able to very readily produce both the basic and more specific mean-field plots
#Hmm, so these'll need stacking for us to be able to do proper faceting
basicOutCum = rbind(
data.frame(melt(as.matrix(densRun[[3]])), X1 = "Density-dependent"),
data.frame(melt(as.matrix(freqRun[[3]])), X1 = "Frequency-dependent"),
data.frame(melt(as.matrix(powRun[[3]])), X1 = "Power-law p=0.2 q=0.2"),
data.frame(melt(as.matrix(powRun2[[3]])), X1 = "Power-law p=0.5 q=0.5"),
data.frame(melt(as.matrix(meanRun[[3]])), X1 = "Mean-field N0=2"),
data.frame(melt(as.matrix(meanRun2[[3]])), X1 = "Mean-field N0=5")
)
basicOutPeak = rbind(
data.frame(melt(as.matrix(densRun[[4]])), X1 = "densRun"),
data.frame(melt(as.matrix(freqRun[[4]])), X1 = "freqRun"),
data.frame(melt(as.matrix(powRun[[4]])), X1 = "powRun"),
data.frame(melt(as.matrix(powRun2[[4]])), X1 = "powRun2"),
data.frame(melt(as.matrix(meanRun[[4]])), X1 = "meanRun"),
data.frame(melt(as.matrix(meanRun2[[4]])), X1 = "meanRun2")
)
#Ok, so this stuff is all for the meanfield plotting - Need to setup dataframes for more basic stuff too
modFunOutCum = rbind(
data.frame(melt(as.matrix(dis1[[3]])), X1="Mean Field  N0=1"),
data.frame(melt(as.matrix(dis2[[3]])), X1="Mean Field  N0=2"),
data.frame(melt(as.matrix(dis5[[3]])), X1="Mean Field  N0=5"),
#data.frame(melt(as.matrix(dis10[[3]])), X1="dis10"),
##################################################
data.frame(melt(as.matrix(net1[[3]])), X1="Static network N0=1"),
data.frame(melt(as.matrix(net2[[3]])), X1="Static network N0=2"),
data.frame(melt(as.matrix(net5[[3]])), X1="Static network N0=5"),
#data.frame(melt(as.matrix(net10[[3]])), X1="net10"),
##################################################
data.frame(melt(as.matrix(dnet1[[3]])), X1="Low dynamic network N0=1"),
data.frame(melt(as.matrix(dnet2[[3]])), X1="Low dynamic network N0=2"),
data.frame(melt(as.matrix(dnet5[[3]])), X1="Low dynamic network N0=5"),
#data.frame(melt(as.matrix(dnet10[[3]])), X1="dnet10"),
##################################################
data.frame(melt(as.matrix(dnet12[[3]])), X1="High dynamic network N0=1"),
data.frame(melt(as.matrix(dnet22[[3]])), X1="High dynamic network N0=2"),
data.frame(melt(as.matrix(dnet52[[3]])), X1="High dynamic network N0=5"),
#data.frame(melt(as.matrix(dnet102[[3]])), X1="dnet102"),
##################################################
data.frame(melt(as.matrix(nl1[[3]])), X1="Static agent-based N0=1"),
data.frame(melt(as.matrix(nl2[[3]])), X1="Static agent-based N0=2"),
data.frame(melt(as.matrix(nl5[[3]])), X1="Static agent-based N0=5"),
#data.frame(melt(as.matrix(nl10[[3]])), X1="nl10"),
##################################################
data.frame(melt(as.matrix(dnl1[[3]])), X1="Dynamic agent-based N0=1"),
data.frame(melt(as.matrix(dnl2[[3]])), X1="Dynamic agent-based N0=2"),
data.frame(melt(as.matrix(dnl5[[3]])), X1="Dynamic agent-based N0=5")
#data.frame(melt(as.matrix(dnl10[[3]])), X1="dnl10")
##################################################
)
modFunOutPeak = rbind(
data.frame(melt(as.matrix(dis1[[4]])), X1="Mean Field  N0=1"),
data.frame(melt(as.matrix(dis2[[4]])), X1="Mean Field  N0=2"),
data.frame(melt(as.matrix(dis5[[4]])), X1="Mean Field  N0=5"),
#data.frame(melt(as.matrix(dis10[[4]])), X1="dis10"),
##################################################
data.frame(melt(as.matrix(net1[[4]])), X1="Static network N0=1"),
data.frame(melt(as.matrix(net2[[4]])), X1="Static network N0=2"),
data.frame(melt(as.matrix(net5[[4]])), X1="Static network N0=5"),
#data.frame(melt(as.matrix(net10[[4]])), X1="net10"),
##################################################
data.frame(melt(as.matrix(dnet1[[4]])), X1="Low dynamic network N0=1"),
data.frame(melt(as.matrix(dnet2[[4]])), X1="Low dynamic network N0=2"),
data.frame(melt(as.matrix(dnet5[[4]])), X1="Low dynamic network N0=5"),
#data.frame(melt(as.matrix(dnet10[[4]])), X1="dnet10"),
##################################################
data.frame(melt(as.matrix(dnet12[[4]])), X1="High dynamic network N0=1"),
data.frame(melt(as.matrix(dnet22[[4]])), X1="High dynamic network N0=2"),
data.frame(melt(as.matrix(dnet52[[4]])), X1="High dynamic network N0=5"),
#data.frame(melt(as.matrix(dnet102[[4]])), X1="dnet102"),
##################################################
data.frame(melt(as.matrix(nl1[[4]])), X1="Static agent-based N0=1"),
data.frame(melt(as.matrix(nl2[[4]])), X1="Static agent-based N0=2"),
data.frame(melt(as.matrix(nl5[[4]])), X1="Static agent-based N0=5"),
#data.frame(melt(as.matrix(nl10[[4]])), X1="nl10"),
##################################################
data.frame(melt(as.matrix(dnl1[[4]])), X1="Dynamic agent-based N0=1"),
data.frame(melt(as.matrix(dnl2[[4]])), X1="Dynamic agent-based N0=2"),
data.frame(melt(as.matrix(dnl5[[4]])), X1="Dynamic agent-based N0=5")
#data.frame(melt(as.matrix(dnl10[[4]])), X1="dnl10")
##################################################
)
modFunOutCumMin = rbind(
data.frame(melt(as.matrix(dismin1[[3]])), X1="dis1"),
data.frame(melt(as.matrix(dismin2[[3]])), X1="dis2"),
data.frame(melt(as.matrix(dismin5[[3]])), X1="dis5"),
#data.frame(melt(as.matrix(dis10[[3]])), X1="dis10"),
##################################################
data.frame(melt(as.matrix(netmin1[[3]])), X1="net1"),
data.frame(melt(as.matrix(netmin2[[3]])), X1="net2"),
data.frame(melt(as.matrix(netmin5[[3]])), X1="net5"),
#data.frame(melt(as.matrix(net10[[3]])), X1="net10"),
##################################################
data.frame(melt(as.matrix(dnetmin1[[3]])), X1="dnet1"),
data.frame(melt(as.matrix(dnetmin2[[3]])), X1="dnet2"),
data.frame(melt(as.matrix(dnetmin5[[3]])), X1="dnet5"),
#data.frame(melt(as.matrix(dnet10[[3]])), X1="dnet10"),
##################################################
data.frame(melt(as.matrix(dnetmin12[[3]])), X1="dnet12"),
data.frame(melt(as.matrix(dnetmin22[[3]])), X1="dnet22"),
data.frame(melt(as.matrix(dnetmin52[[3]])), X1="dnet52"),
#data.frame(melt(as.matrix(dnet102[[3]])), X1="dnet102"),
##################################################
data.frame(melt(as.matrix(nlmin1[[3]])), X1="nl1"),
data.frame(melt(as.matrix(nlmin2[[3]])), X1="nl2"),
data.frame(melt(as.matrix(nlmin5[[3]])), X1="nl5"),
#data.frame(melt(as.matrix(nl10[[3]])), X1="nl10"),
##################################################
data.frame(melt(as.matrix(dnlmin1[[3]])), X1="dnl1"),
data.frame(melt(as.matrix(dnlmin2[[3]])), X1="dnl2"),
data.frame(melt(as.matrix(dnlmin5[[3]])), X1="dnl5")
#data.frame(melt(as.matrix(dnl10[[3]])), X1="dnl10")
##################################################
)
modFunOutPeakMin = rbind(
data.frame(melt(as.matrix(dismin1[[4]])), X1="Mean Field N0 = 1"),
data.frame(melt(as.matrix(dismin2[[4]])), X1="dis2"),
data.frame(melt(as.matrix(dismin5[[4]])), X1="dis5"),
#data.frame(melt(as.matrix(dis10[[4]])), X1="dis10"),
##################################################
data.frame(melt(as.matrix(netmin1[[4]])), X1="net1"),
data.frame(melt(as.matrix(netmin2[[4]])), X1="net2"),
data.frame(melt(as.matrix(netmin5[[4]])), X1="net5"),
#data.frame(melt(as.matrix(net10[[4]])), X1="net10"),
##################################################
data.frame(melt(as.matrix(dnetmin1[[4]])), X1="dnet1"),
data.frame(melt(as.matrix(dnetmin2[[4]])), X1="dnet2"),
data.frame(melt(as.matrix(dnetmin5[[4]])), X1="dnet5"),
#data.frame(melt(as.matrix(dnet10[[4]])), X1="dnet10"),
##################################################
data.frame(melt(as.matrix(dnetmin12[[4]])), X1="dnet12"),
data.frame(melt(as.matrix(dnetmin22[[4]])), X1="dnet22"),
data.frame(melt(as.matrix(dnetmin52[[4]])), X1="dnet52"),
#data.frame(melt(as.matrix(dnet102[[4]])), X1="dnet102"),
##################################################
data.frame(melt(as.matrix(nlmin1[[4]])), X1="nl1"),
data.frame(melt(as.matrix(nlmin2[[4]])), X1="nl2"),
data.frame(melt(as.matrix(nlmin5[[4]])), X1="nl5"),
#data.frame(melt(as.matrix(nl10[[4]])), X1="nl10"),
##################################################
data.frame(melt(as.matrix(dnlmin1[[4]])), X1="dnl1"),
data.frame(melt(as.matrix(dnlmin2[[4]])), X1="dnl2"),
data.frame(melt(as.matrix(dnlmin5[[4]])), X1="dnl5")
#data.frame(melt(as.matrix(dnl10[[4]])), X1="dnl10")
##################################################
)
setwd("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/MassActionRez")
source("DisScriptRewr_Fun.r")
plot(1:10, 1:10)
getwd()
install.packages(c("curl", "e1071", "evaluate", "foreign", "ggtern", "git2r", "httpuv", "knitr", "lme4", "manipulate", "nlme", "quantreg", "R2jags", "R6", "scales", "shiny", "SparseM", "statnet.common"))
library("slidify")
install.packages("stringi")
library("slidify")
getwd()
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
getwd()
library(slidify)
setwd("C:/Users/James/Dropbox/Scholarly Activities/Code/Git/AcademicScribbles/Retreat2016/James Lester")
publish_github(repo="Presentation", username = "Mancwealm")
